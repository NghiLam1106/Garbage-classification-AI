import 'package:flutter/material.dart';
import 'package:garbageClassification/router/app_router.dart';

class QuizGameScreen extends StatefulWidget {
  @override
  _QuizGameScreenState createState() => _QuizGameScreenState();
}

class _QuizGameScreenState extends State<QuizGameScreen> {
  int currentQuestionIndex = 0;
  int? selectedAnswerIndex;
  bool isAnswered = false;
  int score = 0;
  bool showScore = false;

  final List<Map<String, dynamic>> questions = [
    {
      'question': 'Lo·∫°i r√°c n√†o sau ƒë√¢y c√≥ th·ªÉ t√°i ch·∫ø?',
      'answers': [
        {'text': 'V·ªè h·ªôp s·ªØa gi·∫•y', 'isCorrect': true},
        {'text': 'T√∫i nilon ƒë√£ qua s·ª≠ d·ª•ng', 'isCorrect': false},
        {'text': 'Rau c·ªß qu·∫£ h∆∞ h·ªèng', 'isCorrect': false},
        {'text': 'B√£ tr√†, c√† ph√™', 'isCorrect': false},
      ],
      'explanation':
          'V·ªè h·ªôp s·ªØa gi·∫•y thu·ªôc nh√≥m gi·∫•y c√≥ th·ªÉ t√°i ch·∫ø, c·∫ßn l√†m s·∫°ch tr∆∞·ªõc khi b·ªè v√†o th√πng r√°c t√°i ch·∫ø.'
    },
    {
      'question': 'R√°c h·ªØu c∆° KH√îNG n√™n d√πng ƒë·ªÉ l√†m g√¨?',
      'answers': [
        {'text': '·ª¶ ph√¢n compost', 'isCorrect': false},
        {'text': 'L√†m th·ª©c ƒÉn cho ƒë·ªông v·∫≠t', 'isCorrect': false},
        {'text': 'Ch√¥n l·∫•p tr·ª±c ti·∫øp', 'isCorrect': true},
        {'text': 'S·∫£n xu·∫•t biogas', 'isCorrect': false},
      ],
      'explanation':
          'Ch√¥n l·∫•p tr·ª±c ti·∫øp g√¢y √¥ nhi·ªÖm ƒë·∫•t v√† n∆∞·ªõc ng·∫ßm, c·∫ßn x·ª≠ l√Ω qua ·ªß ph√¢n ho·∫∑c c√¥ng ngh·ªá kh√°c.'
    },
    {
      'question': 'Pin ƒë√£ qua s·ª≠ d·ª•ng thu·ªôc lo·∫°i r√°c g√¨?',
      'answers': [
        {'text': 'R√°c t√°i ch·∫ø', 'isCorrect': false},
        {'text': 'R√°c nguy h·∫°i', 'isCorrect': true},
        {'text': 'R√°c th√¥ng th∆∞·ªùng', 'isCorrect': false},
        {'text': 'R√°c h·ªØu c∆°', 'isCorrect': false},
      ],
      'explanation':
          'Pin ch·ª©a kim lo·∫°i n·∫∑ng nh∆∞ ch√¨, th·ªßy ng√¢n - c·ª±c k·ª≥ ƒë·ªôc h·∫°i n·∫øu kh√¥ng x·ª≠ l√Ω ƒë√∫ng c√°ch.'
    },
    {
      'question': 'M√†u s·∫Øc th√πng r√°c n√†o d√†nh cho r√°c v√¥ c∆°?',
      'answers': [
        {'text': 'Xanh l√°', 'isCorrect': false},
        {'text': 'Xanh d∆∞∆°ng', 'isCorrect': false},
        {'text': 'ƒê·ªè', 'isCorrect': false},
        {'text': 'X√°m', 'isCorrect': true},
      ],
      'explanation':
          'Theo quy chu·∫©n Vi·ªát Nam: Xanh l√° (h·ªØu c∆°), Xanh d∆∞∆°ng (t√°i ch·∫ø), X√°m/ƒêen (v√¥ c∆°).'
    },
  ];

  void _nextQuestion() {
    if (currentQuestionIndex < questions.length - 1) {
      setState(() {
        currentQuestionIndex++;
        selectedAnswerIndex = null;
        isAnswered = false;
      });
    } else {
      setState(() {
        showScore = true;
      });
    }
  }

  void _restartQuiz() {
    setState(() {
      currentQuestionIndex = 0;
      score = 0;
      selectedAnswerIndex = null;
      isAnswered = false;
      showScore = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (showScore) {
      return _buildResultScreen();
    }

    final question = questions[currentQuestionIndex];

    return Scaffold(
      appBar: AppBar(
        title: Text('Tr√≤ ch∆°i ph√¢n lo·∫°i r√°c'),
        backgroundColor: Colors.green.shade700,
        actions: [
          Padding(
            padding: EdgeInsets.only(right: 16),
            child: Center(
              child: Text(
                'ƒêi·ªÉm: $score/${questions.length}',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            LinearProgressIndicator(
              value: (currentQuestionIndex + 1) / questions.length,
              backgroundColor: Colors.grey.shade300,
              color: Colors.green,
              minHeight: 10,
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // C√¢u h·ªèi
                  Card(
                    elevation: 4,
                    color: Colors.green.shade50,
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Text(
                        question['question'],
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.green.shade900,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
                  SizedBox(height: 20),

                  // ƒê√°p √°n
                  ...List.generate(question['answers'].length, (index) {
                    final answer = question['answers'][index];
                    final isCorrect = answer['isCorrect'];
                    final isSelected = selectedAnswerIndex == index;

                    Color backgroundColor = Colors.white;
                    if (isAnswered) {
                      if (isSelected) {
                        backgroundColor = isCorrect
                            ? Colors.green.shade100
                            : Colors.red.shade100;
                      } else if (isCorrect) {
                        backgroundColor = Colors.green.shade50;
                      }
                    }

                    return Padding(
                      padding: EdgeInsets.symmetric(vertical: 8),
                      child: InkWell(
                        onTap: () {
                          if (!isAnswered) {
                            setState(() {
                              selectedAnswerIndex = index;
                              isAnswered = true;
                              if (isCorrect) score++;
                            });
                          }
                        },
                        borderRadius: BorderRadius.circular(12),
                        child: AnimatedContainer(
                          duration: Duration(milliseconds: 300),
                          decoration: BoxDecoration(
                            color: backgroundColor,
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: isSelected
                                  ? Colors.green.shade700
                                  : Colors.grey.shade300,
                              width: isSelected ? 2 : 1,
                            ),
                          ),
                          padding: EdgeInsets.all(16),
                          child: Row(
                            children: [
                              if (isAnswered && isSelected)
                                Icon(
                                  isCorrect ? Icons.check_circle : Icons.cancel,
                                  color: isCorrect ? Colors.green : Colors.red,
                                ),
                              if (isAnswered && !isSelected && isCorrect)
                                Icon(Icons.check_circle, color: Colors.green),
                              SizedBox(width: 12),
                              Expanded(
                                child: Text(
                                  answer['text'],
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: isSelected && isAnswered
                                        ? (isCorrect
                                            ? Colors.green.shade900
                                            : Colors.red.shade900)
                                        : Colors.black,
                                    fontWeight: isSelected
                                        ? FontWeight.bold
                                        : FontWeight.normal,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  }),

                  // Gi·∫£i th√≠ch
                  if (isAnswered)
                    Card(
                      color: Colors.blue.shade50,
                      margin: EdgeInsets.only(top: 20),
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'üí° Gi·∫£i th√≠ch:',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.blue.shade900,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(question['explanation']),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: isAnswered
          ? SafeArea(
              child: Padding(
                padding: EdgeInsets.all(16),
                child: ElevatedButton(
                  onPressed: _nextQuestion,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green.shade700,
                    padding: EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: Text(
                    currentQuestionIndex < questions.length - 1
                        ? 'C√¢u ti·∫øp theo'
                        : 'Xem k·∫øt qu·∫£',
                    style: TextStyle(fontSize: 18),
                  ),
                ),
              ),
            )
          : null,
    );
  }

  Widget _buildResultScreen() {
    final percentage = (score / questions.length * 100).round();

    return Scaffold(
      appBar: AppBar(
        title: Text('K·∫øt qu·∫£'),
        backgroundColor: Colors.green.shade700,
      ),
      body: Center(
        child: Padding(
          padding: EdgeInsets.all(24),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Ho√†n th√†nh!',
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 40),
              Stack(
                alignment: Alignment.center,
                children: [
                  SizedBox(
                    width: 200,
                    height: 200,
                    child: CircularProgressIndicator(
                      value: percentage / 100,
                      strokeWidth: 12,
                      color: Colors.green,
                      backgroundColor: Colors.grey.shade200,
                    ),
                  ),
                  Column(
                    children: [
                      Text(
                        '$percentage%',
                        style: TextStyle(
                          fontSize: 36,
                          fontWeight: FontWeight.bold,
                          color: Colors.green.shade800,
                        ),
                      ),
                      Text(
                        '$score/${questions.length} c√¢u ƒë√∫ng',
                        style: TextStyle(fontSize: 18),
                      ),
                    ],
                  ),
                ],
              ),
              SizedBox(height: 40),
              Text(
                _getResultMessage(percentage),
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 20, color: Colors.green.shade800),
              ),
              SizedBox(height: 40),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // N√∫t "Ch∆°i l·∫°i"
                  ElevatedButton(
                    onPressed: _restartQuiz,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green.shade700,
                      padding:
                          EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      'Ch∆°i l·∫°i',
                      style: TextStyle(fontSize: 18,color: Colors.white),
                    ),
                  ),
                  SizedBox(width: 16), // Kho·∫£ng c√°ch gi·ªØa 2 n√∫t

                  // N√∫t "Tr·ªü v·ªÅ trang ch·ªß"
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pushReplacementNamed(context, AppRouter.home);
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor:
                          Colors.blue.shade700, // M√†u kh√°c ƒë·ªÉ ph√¢n bi·ªát
                      padding:
                          EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      'Trang ch·ªß',
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _getResultMessage(int percentage) {
    if (percentage >= 90) return 'Xu·∫•t s·∫Øc! B·∫°n l√† chuy√™n gia ph√¢n lo·∫°i r√°c!';
    if (percentage >= 70) return 'T·ªët l·∫Øm! Ki·∫øn th·ª©c c·ªßa b·∫°n r·∫•t ·∫•n t∆∞·ª£ng!';
    if (percentage >= 50) return 'Kh√° ƒë·∫•y! H√£y √¥n l·∫°i m·ªôt ch√∫t nh√©!';
    return 'C·∫ßn c·ªë g·∫Øng th√™m! ƒê·ªçc k·ªπ h∆∞·ªõng d·∫´n ph√¢n lo·∫°i r√°c nh√©!';
  }
}
